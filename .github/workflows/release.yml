name: Release
permissions:
  contents: write
  packages: write

on:
  push:
    tags:
      - 'v*.*.*'
  # Also allow manual triggering for testing
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (vX.Y.Z format)'
        required: true
        default: 'v0.1.0'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "tag_version=${VERSION}" >> $GITHUB_OUTPUT
            echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
          else
            TAG=${GITHUB_REF#refs/tags/}
            echo "version=${TAG}" >> $GITHUB_OUTPUT
            echo "tag_version=${TAG}" >> $GITHUB_OUTPUT
            echo "version_number=${TAG#v}" >> $GITHUB_OUTPUT
          fi

      - name: Create version.go file
        run: |
          mkdir -p cmd
          cat > cmd/version.go << EOF
          package cmd

          // Version contains the current version of Dai CLI
          var Version = "${{ steps.get_version.outputs.version }}"

          // VersionCommand returns the version of Dai CLI
          func VersionCommand() string {
              return Version
          }
          EOF

      - name: Build binaries
        run: |
          mkdir -p dist
          
          # Build for different platforms
          GOOS=darwin GOARCH=amd64 go build -o dist/dai_darwin_amd64
          GOOS=darwin GOARCH=arm64 go build -o dist/dai_darwin_arm64
          GOOS=linux GOARCH=amd64 go build -o dist/dai_linux_amd64
          GOOS=linux GOARCH=arm64 go build -o dist/dai_linux_arm64
          GOOS=windows GOARCH=amd64 go build -o dist/dai_windows_amd64.exe
          
          # Create tarballs/zip files
          cd dist
          
          tar -czf dai_darwin_amd64.tar.gz dai_darwin_amd64
          tar -czf dai_darwin_arm64.tar.gz dai_darwin_arm64
          tar -czf dai_linux_amd64.tar.gz dai_linux_amd64
          tar -czf dai_linux_arm64.tar.gz dai_linux_arm64
          zip dai_windows_amd64.zip dai_windows_amd64.exe
          
          # Rename binaries to "dai" for simplicity
          mv dai_darwin_amd64 dai
          tar -czf darwin_amd64.tar.gz dai
          rm dai
          
          mv dai_darwin_arm64 dai
          tar -czf darwin_arm64.tar.gz dai
          rm dai
          
          mv dai_linux_amd64 dai
          tar -czf linux_amd64.tar.gz dai
          rm dai
          
          mv dai_linux_arm64 dai
          tar -czf linux_arm64.tar.gz dai
          rm dai
          
          mv dai_windows_amd64.exe dai.exe
          zip windows_amd64.zip dai.exe
          
          # Generate checksums
          sha256sum *.tar.gz *.zip > checksums.txt
          
          cd ..

      - name: Create and Upload Release
        run: |
          # Create the release
          gh release create ${{ steps.get_version.outputs.tag_version }} \
            --repo ${{ github.repository }} \
            --title "Release ${{ steps.get_version.outputs.version }}" \
            --notes "Release ${{ steps.get_version.outputs.version }}"
          
          # Upload all assets
          cd dist
          for file in *.tar.gz *.zip checksums.txt; do
            gh release upload ${{ steps.get_version.outputs.tag_version }} "$file" \
              --repo ${{ github.repository }} \
              --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update Homebrew formula
        run: |
          # Get the SHA256 checksums
          DARWIN_AMD64_SHA=$(grep darwin_amd64.tar.gz dist/checksums.txt | awk '{print $1}')
          DARWIN_ARM64_SHA=$(grep darwin_arm64.tar.gz dist/checksums.txt | awk '{print $1}')
          LINUX_AMD64_SHA=$(grep linux_amd64.tar.gz dist/checksums.txt | awk '{print $1}')
          LINUX_ARM64_SHA=$(grep linux_arm64.tar.gz dist/checksums.txt | awk '{print $1}')
          
          VERSION="${{ steps.get_version.outputs.version_number }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          
          # Create updated formula
          mkdir -p homebrew-formula
          cat > homebrew-formula/dai.rb << EOF
          class Dai < Formula
            desc "AI-backed dependency upgrade advisor for package.json projects"
            homepage "https://github.com/${{ github.repository }}"
            license "MIT"
            version "${VERSION}"
          
            if OS.mac?
              if Hardware::CPU.arm?
                url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/darwin_arm64.tar.gz"
                sha256 "${DARWIN_ARM64_SHA}"
              else
                url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/darwin_amd64.tar.gz"
                sha256 "${DARWIN_AMD64_SHA}"
              end
            elsif OS.linux?
              if Hardware::CPU.intel?
                url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/linux_amd64.tar.gz"
                sha256 "${LINUX_AMD64_SHA}"
              else
                url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/linux_arm64.tar.gz"
                sha256 "${LINUX_ARM64_SHA}"
              end
            end
          
            def install
              bin.install "dai"
            end
          
            test do
              system "#{bin}/dai", "--version"
            end
          
            def caveats
              <<~EOS
                To use Dai CLI, you may need to configure your API keys:
                
                For OpenAI integration:
                $ export DAI_OPENAI_API_KEY=your_api_key
                
                For GitHub integration:
                $ export DAI_GITHUB_TOKEN=your_github_token
                
                You can add these to your shell profile for permanent use.
              EOS
            end
          end
          EOF

      - name: Upload Homebrew formula
        uses: actions/upload-artifact@v4
        with:
          name: homebrew-formula
          path: homebrew-formula/dai.rb

  homebrew:
    needs: release
    runs-on: ubuntu-latest
    if: github.repository == 'HibiZA/Dai'  # Only run on the main repo, fixed case sensitivity
    steps:
      - name: Download Homebrew formula
        uses: actions/download-artifact@v4
        with:
          name: homebrew-formula
          path: ./

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Get tag version
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Clone Homebrew tap repository
        run: |
          git clone https://${{ secrets.HOMEBREW_TAP_TOKEN }}@github.com/HibiZA/homebrew-dai.git
          mkdir -p homebrew-dai/Formula
          cp dai.rb homebrew-dai/Formula/
          cd homebrew-dai
          git add Formula/dai.rb
          git commit -m "Update dai to ${{ steps.get_tag.outputs.version }}"
          git push 